apply plugin: 'com.android.application'

android {
    namespace "com.heartcatcher.game"
    compileSdkVersion 34
    buildToolsVersion "34.0.0"
    
    defaultConfig {
        applicationId "com.heartcatcher.game"
        minSdkVersion 24  // Android 7.0 (covers 95%+ devices)
        targetSdkVersion 34  // Latest for Play Store
        versionCode 1
        versionName "1.0.0"
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Multi-language support
        resConfigs "en", "es", "fr", "de", "it", "pt", "ru", "zh", "ja", "ko"
        
        // Vector drawable support
        vectorDrawables.useSupportLibrary = true
        
        // Multidex support for large apps
        multiDexEnabled true
        
        // Asset packaging options
        aaptOptions {
            ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
            cruncherEnabled true
            cruncherProcesses 4
            failOnMissingConfigEntry false
        }
        
        // Native library filters (optimize APK size)
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        
        // Build config fields
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
        buildConfigField "boolean", "ENABLE_LOGGING", "false"
        
        // Manifest placeholders
        manifestPlaceholders = [
            appName: "@string/app_name",
            appIcon: "@mipmap/ic_launcher"
        ]
    }
    
    // Build types configuration
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
            
            manifestPlaceholders = [
                appName: "Heart Catcher Debug",
                appIcon: "@mipmap/ic_launcher_debug"
            ]
            
            // Disable Crashlytics for debug builds
            ext.enableCrashlytics = false
        }
        
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
            
            // ProGuard configuration
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Signing configuration
            signingConfig signingConfigs.release
            
            buildConfigField "boolean", "ENABLE_LOGGING", "false"
            
            manifestPlaceholders = [
                appName: "@string/app_name",
                appIcon: "@mipmap/ic_launcher"
            ]
            
            // Post-processing
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFile 'proguard-rules.pro'
            }
        }
        
        // Staging build type
        staging {
            initWith release
            applicationIdSuffix '.staging'
            versionNameSuffix '-staging'
            debuggable true
            
            manifestPlaceholders = [
                appName: "Heart Catcher Staging",
                appIcon: "@mipmap/ic_launcher_staging"
            ]
        }
    }
    
    // Signing configurations
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        
        release {
            if (project.hasProperty('HEART_CATCHER_RELEASE_STORE_FILE')) {
                storeFile file(HEART_CATCHER_RELEASE_STORE_FILE)
                storePassword HEART_CATCHER_RELEASE_STORE_PASSWORD
                keyAlias HEART_CATCHER_RELEASE_KEY_ALIAS
                keyPassword HEART_CATCHER_RELEASE_KEY_PASSWORD
                
                // Enable v1 and v2 signing
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }
    
    // Compilation options
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }
    
    // Packaging options
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        pickFirst '**/libreactnativejni.so'
        
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude '**/kotlin/**'
        exclude '**/*.kotlin_metadata'
        exclude '**/*.version'
        exclude '**/*.properties'
        exclude '**/*.proto'
    }
    
    // Lint options
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage', 'MissingTranslation', 'ExtraTranslation'
        baseline file("lint-baseline.xml")
    }
    
    // Test options
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        
        unitTests.all {
            jvmArgs '-noverify'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }
    
    // Bundle configuration for Play Store
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    
    // Split APKs by ABI and density
    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            universalApk true
        }
        
        density {
            enable true
            reset()
            include "ldpi", "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
        }
    }
    
    // Flavor dimensions
    flavorDimensions "version", "environment"
    
    productFlavors {
        free {
            dimension "version"
            applicationIdSuffix ".free"
            versionNameSuffix "-free"
        }
        
        pro {
            dimension "version"
            applicationIdSuffix ".pro"
            versionNameSuffix "-pro"
        }
        
        development {
            dimension "environment"
            buildConfigField "String", "API_BASE_URL", "\"https://dev-api.heartcatcher.com\""
        }
        
        production {
            dimension "environment"
            buildConfigField "String", "API_BASE_URL", "\"https://api.heartcatcher.com\""
        }
    }
}

// External dependencies
repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

// Dependencies
dependencies {
    // Core Android libraries
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.multidex:multidex:2.0.1"
    
    // Material Design
    implementation "com.google.android.material:material:1.11.0"
    
    // Capacitor
    implementation project(':capacitor-android')
    implementation project(':capacitor-app')
    implementation project(':capacitor-haptics')
    implementation project(':capacitor-keyboard')
    implementation project(':capacitor-status-bar')
    implementation project(':capacitor-splash-screen')
    implementation project(':capacitor-filesystem')
    implementation project(':capacitor-device')
    implementation project(':capacitor-network')
    implementation project(':capacitor-screen-orientation')
    implementation project(':capacitor-toast')
    
    // Performance monitoring
    implementation 'com.google.firebase:firebase-perf:20.5.2'
    implementation 'com.google.firebase:firebase-crashlytics:18.6.1'
    implementation 'com.google.firebase:firebase-analytics:21.5.0'
    
    // Core library desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    
    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'androidx.test:runner:1.5.2'
    
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.5.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}

// Apply Capacitor build configuration
apply from: 'capacitor.build.gradle'

// Google Services (Firebase)
try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.exists()) {
        apply plugin: 'com.google.gms.google-services'
        apply plugin: 'com.google.firebase.crashlytics'
        apply plugin: 'com.google.firebase.firebase-perf'
    }
} catch(Exception e) {
    logger.warn("Firebase services not configured: ${e.message}")
}

// Task to increment version code
task incrementVersionCode {
    doLast {
        def versionPropsFile = file('version.properties')
        def versionProps = new Properties()
        
        if (versionPropsFile.exists()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        
        def versionCode = (versionProps['VERSION_CODE'] ?: '0').toInteger() + 1
        versionProps['VERSION_CODE'] = versionCode.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        
        android.defaultConfig.versionCode = versionCode
    }
}

// Auto-increment version code for release builds
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease' || task.name == 'bundleRelease') {
        task.dependsOn incrementVersionCode
    }
}
